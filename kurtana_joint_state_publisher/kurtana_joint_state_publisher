#!/usr/bin/python

import roslib; roslib.load_manifest('kurtana_joint_state_publisher')
import rospy
import wx
from sensor_msgs.msg import JointState
from math import pi
from threading import Thread

RANGE = 10000

def get_param(name, value=None):
	private = "~%s" % name
	if rospy.has_param(private):
		return rospy.get_param(private)
	elif rospy.has_param(name):
		return rospy.get_param(name)
	else:
		return value

class KurtanaJointStatePublisher():
	def __init__(self):
		self.free_joints = {}
		self.joint_list = [] # for maintaining the original order of the joints


		ksj_name = 'kurtana_stretch_joint'
		krj_name = 'kurtana_roll_joint'
		kpj_name = 'kurtana_pitch_joint'

		ksj_param = {'min':0, 'max':0.515, 'zero':0, 'value':0, 'velocity':0}
		krj_param = {'min':-pi/2, 'max':pi/2, 'zero':0, 'value':0, 'velocity':0}
		kpj_param = {'min':-pi/2, 'max':pi/2, 'zero':0, 'value':0, 'velocity':0}

		self.free_joints[ksj_name] = ksj_param
		self.joint_list.append(ksj_name)
		self.free_joints[krj_name] = krj_param
		self.joint_list.append(krj_name)
		self.free_joints[kpj_name] = kpj_param
		self.joint_list.append(kpj_name)


		use_gui = get_param("use_kurtana_gui", True)

		if use_gui:
			app = wx.App()
			self.gui = JointStatePublisherGui("Kurtana Joint State Publisher", self)
			self.gui.Show()
			Thread(target=app.MainLoop).start()
		else:
			self.gui = None

		self.pub = rospy.Publisher('joint_states', JointState)

	def loop(self):
		hz = get_param("rate", 10) # 10hz
		r = rospy.Rate(hz)

		# Publish Joint States
		while not rospy.is_shutdown():
			msg = JointState()
			msg.header.stamp = rospy.Time.now()

			# Add Free Joints
			for (name,joint) in self.free_joints.items():
				msg.name.append(str(name))
				msg.position.append(joint['value'])
				msg.velocity.append(joint['velocity'])

			self.pub.publish(msg)

			r.sleep()

class JointStatePublisherGui(wx.Frame):
	def __init__(self, title, jsp):
		wx.Frame.__init__(self, None, -1, title,(-1, -1));
		self.jsp = jsp
		self.joint_map = {}
		panel = wx.Panel(self, wx.ID_ANY);
		box = wx.BoxSizer(wx.VERTICAL)
		font = wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD)

		### Sliders ###
		for name in self.jsp.joint_list:
			joint = self.jsp.free_joints[name]

			if joint['min'] == joint['max']:
				continue

			row = wx.GridSizer(1,2)
			label = wx.StaticText(panel, -1, name)
			label.SetFont(font)
			row.Add(label, 1, wx.ALIGN_CENTER_VERTICAL)

			display = wx.TextCtrl (panel, value=str(0),
				style=wx.TE_READONLY | wx.ALIGN_RIGHT)

			row.Add(display, flag= wx.ALIGN_RIGHT| wx.ALIGN_CENTER_VERTICAL)
			box.Add(row, 1, wx.EXPAND)
			slider = wx.Slider(panel, -1, RANGE/2, 0, RANGE,
				style= wx.SL_AUTOTICKS | wx.SL_HORIZONTAL)
			slider.SetFont(font)
			box.Add(slider, 1, wx.EXPAND)

			self.joint_map[name] = {'slidervalue':0, 'display':display,
				'slider':slider, 'joint':joint}

		### Buttons ###
		self.ctrbutton = wx.Button(panel, 1, 'Center')
		self.Bind(wx.EVT_SLIDER, self.sliderUpdate)

		wx.EVT_BUTTON(self, 1, self.center_event)

		box.Add(self.ctrbutton, 0, wx.EXPAND)

		panel.SetSizer(box)
		self.center()
		box.Fit(self)
		self.update_values()


	def update_values(self):
		for (name,joint_info) in self.joint_map.items():
			purevalue = joint_info['slidervalue']
			joint = joint_info['joint']
			value = self.sliderToValue(purevalue, joint)
			joint['value'] = value

		self.update_sliders()

	def update_sliders(self):
		for (name,joint_info) in self.joint_map.items():
			joint = joint_info['joint']
			joint_info['slidervalue'] = self.valueToSlider(joint['value'], joint)
			joint_info['slider'].SetValue(joint_info['slidervalue'])
			joint_info['display'].SetValue("%.2f"%joint['value'])

	def center_event(self, event):
		self.center()

	def center(self):
		rospy.loginfo("Centering")
		for (name,joint_info) in self.joint_map.items():
			joint = joint_info['joint']
			joint_info['slidervalue'] = self.valueToSlider(joint['zero'], joint)

		self.update_values()

	def sliderUpdate(self, event):
		for (name,joint_info) in self.joint_map.items():
			joint_info['slidervalue'] = joint_info['slider'].GetValue()

		self.update_values()

	def valueToSlider(self, value, joint):
		return (value - joint['min']) * float(RANGE) / (joint['max'] - joint['min'])

	def sliderToValue(self, slider, joint):
		pctvalue = slider / float(RANGE)
		return joint['min'] + (joint['max']-joint['min']) * pctvalue


if __name__ == '__main__':
	try:
		rospy.init_node('kurtana_joint_state_publisher')
		jsp = KurtanaJointStatePublisher()
		jsp.loop()

	except rospy.ROSInterruptException: pass
